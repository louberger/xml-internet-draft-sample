#Crazy makefile authored by Lou Berger <lberger@labn.net>
#Modified by Christian Hopps <chopps@chopps.org>
#The author makes no claim/restriction on use.  It is provided "AS IS".
#This file is considered a hack and not production grade by the author

#Assumes the basename of draft xml file, e.g., <basename>.xml is set as
#DRAFT

SHELL   = bash

#YANG related variables
MODELS := $(shell awk '/^<CODE BEGINS>/{print gensub(/\"/,"","g",gensub(/@.*/,".yang",1,$$4))}' $(DRAFT).xml)
TREES := $(MODELS:.yang=.tree)

#assumes standard yang modules installed in ~/.yang, ../yang or ../../yang, customize as needed
#  e.g., based on a 'cd .. ; git clone https://github.com/YangModels/yang.git'
YANG_REPO        = https://github.com/YangModels/yang.git
YANG_DEFAULT_DIR = ~/.yang
YANGIMPORT_BASE := $(shell if [ -e ../yang ] ; then echo ../yang/ ; else if [ -e ../../yang/ ] ; then echo ../../yang/ ; else if [ -e $(YANG_DEFAULT_DIR) ] ; then echo $(YANG_DEFAULT_DIR)/; else echo YANG_IMPORT_NOT_FOUND ; fi ; fi ; fi)
PLUGPATH         = $(shell echo `find . $(YANGIMPORT_BASE) -name '[a-z]*.yang' | sed 's,/[a-z0-9A-Z@_\-]*.yang$$,,' | uniq | grep -v vendor` | tr \  :)
PYTHONPATH      := $(shell echo `find /usr/lib* /usr/local/lib* -name  site-packages | tail -1 ` | tr \  :)
DATE		:= $(shell date +%F)

#I-D related
WITHXML2RFC := $(shell which xml2rfc > /dev/null 2>&1 ; echo $$? )

ID_DIR	     = IDs
REVS	    := $(shell grep docName $(DRAFT).xml | tr '"\->' '   ' | \
		 strings | awk '{printf "%02d %02d",$$NF-1,$$NF}')
PREV_REV    := $(word 1, $(REVS))
REV	    := $(word 2, $(REVS))
DRAFT_ROOT  := $(DRAFT:%-$(REV)=%)
OLD          = $(ID_DIR)/$(DRAFT_ROOT)-$(PREV_REV)
NEW          = $(ID_DIR)/$(DRAFT_ROOT)-$(REV)

%.tree: %.yang
	@if grep -q '^ *revision *$(DATE)' $< ; then \
		echo $< revision is up to date ; \
	else \
		echo Updating $< revision date ; \
		rm -f $<.prev; cp -pf $< $<.prev ; \
		sed 's/revision.\(\|\"\)[0-9]*\-[0-9]*\-[0-9]*\(\|\"\)/revision \1'$(DATE)'\2/' < $<.prev > $< ; \
		diff $<.prev $< || exit 0 ; \
	fi
	@echo Generating $@	
	@PYTHONPATH=$(PYTHONPATH) pyang --ietf -f tree --tree-line-length 76 -p $(PLUGPATH) $< > $@  || exit 0

%.jsonxsl: %.yang
	@echo Generating $@
	@PYTHONPATH=$(PYTHONPATH) pyang -f jsonxsl  -p $(PLUGPATH) $< > $@ || exit 0

%.txt: %.xml
	@if [ $(WITHXML2RFC) == 0 ] ; then 	\
		rm -f $@.prev; cp -pf $@ $@.prev > /dev/null 2>&1 ; \
		xml2rfc $< -o $@		; \
		if [ -f $@.prev ] ; then diff $@.prev $@ || exit 0 ; fi ; \
	fi

%.html: %.xml
	@if [ $(WITHXML2RFC) == 0 ] ; then 	\
		rm -f $@.prev; cp -pf $@ $@.prev > /dev/null 2>&1 ; \
		xml2rfc --html $< -o $@		; \
	fi

%.raw: %.xml
	@if [ $(WITHXML2RFC) == 0 ] ; then 	\
		rm -f $@.prev; cp -pf $@ $@.prev > /dev/null 2>&1 ; \
		xml2rfc --raw $< -o $@	; \
	fi

all:	$(YANGIMPORT_BASE) $(TREES) xml2rfc $(DRAFT).txt $(DRAFT).html $(DRAFT).raw

$(YANGIMPORT_BASE):
	@if [ "$(MODELS)" != "" ] ; then \
		echo "Unable to find Standard YANG modules."; \
		echo "To fix and create $(YANG_DEFAULT_DIR), type 'make yangbase'"; \
		exit 1 ; \
	fi

checkyang:	$(YANGIMPORT_BASE)
	@if [ "$(MODELS)" != "" ] ; then \
		for f in $(MODELS); do \
			echo "Checking $$f" ; \
			PYTHONPATH=$(PYTHONPATH) pyang --verbose -p $(PLUGPATH) $$f ; \
		done ; \
	fi

yangbase:
	@if [ "$(YANGIMPORT_BASE)" == "YANG_IMPORT_NOT_FOUND" ] ; then \
		echo "Creating $(YANG_DEFAULT_DIR) from $(YANG_REPO)" ; \
		git clone $(YANG_REPO) $(YANG_DEFAULT_DIR) ; \
		echo "Modules can be updated via 'make yangbase' in the future." ; \
	else \
		(cd $(YANGIMPORT_BASE) ; git pull) ; \
	fi

trees: $(TREES)

vars:	$(YANGIMPORT_BASE)
	@echo PYTHONPATH=$(PYTHONPATH)
	@echo PLUGPATH=$(PLUGPATH)
	@echo YANGIMPORT_BASE=$(YANGIMPORT_BASE)
	@echo MODELS=$(MODELS)
	@echo TREES=$(TREES)
	@echo DATE=$(DATE)
	@which xml2rfc
	@echo WITHXML2RFC=$(WITHXML2RFC)
	@echo DRAFT=$(DRAFT)
	@echo DRAFT_ROOT=$(DRAFT_ROOT)
	@echo REVS=$(REVS)
	@echo PREV_REV=$(PREV_REV)
	@echo REV=$(REV)
	@echo OLD=$(OLD)

xml2rfc:
	@if [ $(WITHXML2RFC) != 0 ] ; then 	\
		echo "$@ not found, please run 'pip install $@'" ; \
		exit 1 ; \
	fi

$(DRAFT).xml: $(YANGIMPORT_BASE) $(MODELS)
	@rm -f $@.prev; cp -p $@ $@.prev
	@for model in $? ; do if [ "$$model" != "$(YANGIMPORT_BASE)" ] ; then \
		rm -f $@.tmp; cp -p $@ $@.tmp	 		 	; \
		echo Updating $@ based on $$model		 	; \
		base=`echo $$model | cut -d. -f 1` 		 	; \
		echo $${base};\
		start_stop=(`awk 'BEGIN{pout=1}				\
			/^<CODE BEGINS> file .'$${base}'@/ 		\
				{pout=0; print NR-1;} 			\
			pout == 0 && /^<CODE E/ 			\
				{pout=1; print NR;}' $@.tmp`) 		; \
		head -$${start_stop[0]}    $@.tmp    		> $@	; \
		echo '<CODE BEGINS> file "'$${base}'@'`date +%F`'.yang"'>> $@;\
		cat $$model					>> $@	; \
		tail -n +$${start_stop[1]} $@.tmp 		>> $@	; \
		rm -f $@.tmp 		 				; \
	fi ; done
	diff -bw $@.prev $@ || exit 0

$(DRAFT)-diff.txt: $(DRAFT).txt 
	@echo "Generating diff of $(OLD).txt and $(DRAFT).txt > $@..."
	if [ -f  $(OLD).txt ] ; then \
		sdiff --ignore-space-change --expand-tabs -w 168 $(OLD).txt $(DRAFT).txt | \
		cut -c84-170 | sed 's/. *//'  \
		| grep -v '^ <$$' | grep -v '^<$$' > $@ ;\
	 fi

idnits: $(DRAFT).txt
	@if [ ! -f idnits ] ; then \
		rm -f $@ 					;\
		wget http://tools.ietf.org/tools/idnits/idnits	;\
		chmod 755 idnits				;\
	fi
	./idnits $(DRAFT).txt > $@.out
	@cat $@.out
	@grep -q 'Summary: 0 error' $@.out

id: $(DRAFT).txt $(DRAFT).html
	@if [ ! -e $(ID_DIR) ] ; then \
		echo "Creating $(ID_DIR) directory" 	;\
		mkdir $(ID_DIR) 			;\
		git add $(ID_DIR)			;\
	fi
	@if [ -f "$(NEW).xml" ] ; then \
		echo "" 				;\
		echo "$(NEW).xml already exists, not overwriting!" ;\
		diff -sq $(DRAFT).xml  $(NEW).xml 	;\
		echo "" 				;\
	else \
		echo "Copying to $(NEW).{xml,txt,html}" ;\
		echo "" 				;\
		cp -p $(DRAFT).xml $(NEW).xml  		;\
		cp -p $(DRAFT).txt $(NEW).txt  		;\
		cp -p $(DRAFT).html $(NEW).html  	;\
		git add $(NEW).xml $(NEW).txt  $(NEW).html ;\
		ls -lt $(DRAFT).* $(NEW).* 		;\
	fi

rmid:
	@echo "Removing:"
	@ls -l $(NEW).xml $(NEW).txt  $(NEW).html
	@echo -n "Hit <ctrl>-C to abort, or <CR> to continue: "
	@read t
	@rm -f $(NEW).xml $(NEW).txt $(NEW).html
	@git rm  $(NEW).xml $(NEW).txt $(NEW).html

travis: idnits
	@cat $(DRAFT).txt
	@if [ -f "$(OLD).txt" ] ; then \
	    diff -bw "$(OLD).txt" $(DRAFT).txt || true ;\
	fi

#end

